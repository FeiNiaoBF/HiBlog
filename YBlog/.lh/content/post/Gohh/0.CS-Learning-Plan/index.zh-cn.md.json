{
    "sourceFile": "content/post/Gohh/0.CS-Learning-Plan/index.zh-cn.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1712581801347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712581828118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n author: ['Yeelight']\n showtoc: true\n weight: -100\n readingTime: true\n-image: \"photo_2024-04-08_20-31-47.jpg\"\n+image: \"https://s2.loli.net/2024/04/08/Xej8au1VkhZN4HT.jpg\"\n ---\n \n ## 计算机语言基础\n \n"
                },
                {
                    "date": 1715563198054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< relref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\" >}})\n+———> [Go 语言学习]({{< relref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/index.zh-cn.md\" >}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715564242648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< relref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/index.zh-cn.md\" >}})\n+———> [Go 语言学习]()\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715564252017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]()\n+———> [Go 语言学习](../1.ComputerBasics/)\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715564271919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,17 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习](../1.ComputerBasics/)\n+———> [Go 语言学习](../1.ComputerBasics/CSLanguages/Golang/index.zh-cn.md)\n \n **项目练习**\n \n ### python 语言\n \n **项目练习**\n \n-1. [TG_bot]({{< relref \"\" >}})\n+<!-- 1. [TG_bot]({{< relref \"\" >}}) -->\n \n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n"
                },
                {
                    "date": 1715564279262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n ### 基础结构\n \n-- **[数组]({{< relref \"\" >}})**：是一种线性表数据结构，用于存储相同类型的数据元素。\n+- **[数组](../)**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n"
                },
                {
                    "date": 1715564284797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n ### 基础结构\n \n-- **[数组](../)**：是一种线性表数据结构，用于存储相同类型的数据元素。\n+- **[数组](../2.DataStructures_Algorithms/GolangDS/Array/index.zh-cn.md)**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n"
                },
                {
                    "date": 1715564289893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n   - ... ...\n \n-- **[链表]({{< relref \"\" >}})**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n+- **[链表](../)**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n \n   - [ ] _反转链表_\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n"
                },
                {
                    "date": 1715564295660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n   - ... ...\n \n-- **[链表](../)**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n+- **[链表](../2.DataStructures_Algorithms/GolangDS/Link/index.zh-cn.md)**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n \n   - [ ] _反转链表_\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n"
                },
                {
                    "date": 1715564313637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,15 +48,15 @@\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n   - ... ...\n \n-- **栈**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n+- **[栈]**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n   - [ ]\n-- **队列**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n+- **[队列]**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n   - [ ]\n-- **树**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n+- **[树]**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n   - [ ]\n-- **图**：由节点（或顶点）和边组成的数据结构，用于表示多对多的关系。\n+- **[图]**：由节点（或顶点）和边组成的数据结构，用于表示多对多的关系。\n   - [ ]\n \n ### 其他结构\n \n"
                },
                {
                    "date": 1715564325174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n   - ... ...\n \n-- **[栈]**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n+- **[栈](**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n   - [ ]\n - **[队列]**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n   - [ ]\n - **[树]**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n"
                },
                {
                    "date": 1715564331575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n   - ... ...\n \n-- **[栈](**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n+- **[栈](../2.DataStructures_Algorithms/GolangDS/Stack/index.zh-cn.md**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n   - [ ]\n - **[队列]**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n   - [ ]\n - **[树]**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n"
                },
                {
                    "date": 1715566685747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习](../1.ComputerBasics/CSLanguages/Golang/index.zh-cn.md)\n+———> [Go 语言学习]()\n \n **项目练习**\n \n ### python 语言\n@@ -48,9 +48,9 @@\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n   - ... ...\n \n-- **[栈](../2.DataStructures_Algorithms/GolangDS/Stack/index.zh-cn.md**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n+- **[栈](../2.DataStructures_Algorithms/GolangDS/Stack/index.zh-cn.md)**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n   - [ ]\n - **[队列]**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n   - [ ]\n - **[树]**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n"
                },
                {
                    "date": 1715566694031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]()\n+———> [Go 语言学习]({{< re>}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715566702035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< re>}})\n+———> [Go 语言学习]({{< ref \"/content/\">}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715566710281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< ref \"/content/\">}})\n+———> [Go 语言学习]({{< ref \"/content/post/Gohh/1.ComputerBasics/CSLanguages/\">}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715566716031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< ref \"/content/post/Gohh/1.ComputerBasics/CSLanguages/\">}})\n+———> [Go 语言学习]({{< ref \"/content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\">}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715566722697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n **项目练习**\n \n ### Go 语言\n \n-———> [Go 语言学习]({{< ref \"/content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\">}})\n+———> [Go 语言学习]({{< ref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\">}})\n \n **项目练习**\n \n ### python 语言\n"
                },
                {
                    "date": 1715567201412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n ### 基础结构\n \n-- **[数组](../2.DataStructures_Algorithms/GolangDS/Array/index.zh-cn.md)**：是一种线性表数据结构，用于存储相同类型的数据元素。\n+- **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n"
                },
                {
                    "date": 1715567207711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### 基础结构\n+### {基础结构}\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567213321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### {基础结构}\n+### [基础结构]\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567220384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### [基础结构]\n+### [基础结构]({})\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567227386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### [基础结构]({})\n+### [基础结构]({{< ref \"\">}})\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567239487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### [基础结构]({{< ref \"\">}})\n+### [基础结构]({{< ref \"/\">}})\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567245166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### [基础结构]({{< ref \"/\">}})\n+### [基础结构]({{< ref \"/content/post/Gohh/\">}})\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567252993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n ## 数据结构\n \n 数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n \n-### [基础结构]({{< ref \"/content/post/Gohh/\">}})\n+### [基础结构]({{< ref \"post/Gohh/2.DataStructures_Algorithms/GolangDS/_index.zh-cn.md\">}})\n \n - **数组**：是一种线性表数据结构，用于存储相同类型的数据元素。\n \n   - [x] _二分搜索_\n"
                },
                {
                    "date": 1715567269038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   - [x] _冒泡排序_\n   - [ ] _动态规划_\n   - ... ...\n \n-- **[链表](../2.DataStructures_Algorithms/GolangDS/Link/index.zh-cn.md)**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n+- **链表**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n \n   - [ ] _反转链表_\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n"
                },
                {
                    "date": 1715567274313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   - [ ] _环形链表_\n   - [ ] _LRU 缓存算法_\n   - ... ...\n \n-- **[栈](../2.DataStructures_Algorithms/GolangDS/Stack/index.zh-cn.md)**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n+- **栈**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n   - [ ]\n - **[队列]**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n   - [ ]\n - **[树]**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n"
                },
                {
                    "date": 1715567284244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< relref \"\">}})\n+[操作系统的具体学习目录]({{< ref\"\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567292528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref\"\">}})\n+[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567339668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/\">}})\n+[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/4.OS/S6.081/\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567348286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/4.OS/S6.081/\">}})\n+[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/5.OS/S6.081/_index.zh-cn.md\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567357369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref\"/content/post/Gohh/5.OS/S6.081/_index.zh-cn.md\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn.md\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567366333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn.md\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn.md\" >}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567382126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn.md\" >}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567435616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/_index.zh-cn.md\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567441336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/_index.zh-cn.md\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567448679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS \">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567462923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS \">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567469472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                },
                {
                    "date": 1715567478310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n ## 体系结构\n \n ## 操作系统\n \n-[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn\">}})\n+[操作系统的具体学习目录]({{< ref \"post/Gohh/4.OS/S6.081/_index.zh-cn.\">}})\n \n ## 计算机网络\n \n ## CS 后续学习路径\n"
                }
            ],
            "date": 1712581801347,
            "name": "Commit-0",
            "content": "---\ntitle: 'CS学习计划'\ndate: 2024-03-10T15:58:41+08:00\ndraft: false\ntaps: ['CS', 'plan']\ncategories: ['learning', 'OS']\nauthor: ['Yeelight']\nshowtoc: true\nweight: -100\nreadingTime: true\nimage: \"photo_2024-04-08_20-31-47.jpg\"\n---\n\n## 计算机语言基础\n\n### C 语言\n\n**项目练习**\n\n### Go 语言\n\n———> [Go 语言学习]({{< relref \"post/Gohh/1.ComputerBasics/CSLanguages/Golang/_index.zh-cn.md\" >}})\n\n**项目练习**\n\n### python 语言\n\n**项目练习**\n\n1. [TG_bot]({{< relref \"\" >}})\n\n## 数据结构\n\n数据结构是对计算机高级语言最能体现打基础的学习，目前有许多常见的数据结构，我喜欢分类来处理。\n\n### 基础结构\n\n- **[数组]({{< relref \"\" >}})**：是一种线性表数据结构，用于存储相同类型的数据元素。\n\n  - [x] _二分搜索_\n  - [x] _冒泡排序_\n  - [ ] _动态规划_\n  - ... ...\n\n- **[链表]({{< relref \"\" >}})**：由一系列节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。\n\n  - [ ] _反转链表_\n  - [ ] _环形链表_\n  - [ ] _LRU 缓存算法_\n  - ... ...\n\n- **栈**：一种遵循后进先出（LIFO）原则的数据结构，只允许在表的一端进行插入和删除操作。\n  - [ ]\n- **队列**：一种遵循先进先出（FIFO）原则的数据结构，允许在表的一端进行插入，在另一端进行删除操作。\n  - [ ]\n- **树**：一种非线性数据结构，由节点组成，节点之间存在层次关系。\n  - [ ]\n- **图**：由节点（或顶点）和边组成的数据结构，用于表示多对多的关系。\n  - [ ]\n\n### 其他结构\n\n- **并查集**：一种用于处理不相交集合的数据结构，常用于解决连接性问题。\n- **字典树**：一种用于快速检索的树形数据结构，常用于字符串检索。\n- **散列表**：利用哈希函数将关键字映射到表中一个位置来访问记录的数据结构。\n- **树状数组**：一种高效的数据结构，用于维护序列前缀和的动态查询。\n- **映射**：一种将键映射到值的抽象数据类型，常用于快速查找。\n- **集合**：一种抽象数据类型，用于存储互不相同的元素的集合。\n\n### 真实世界\n\n在实际项目中，数据结构和算法的选择取决于具体的应用场景和问题需求。一般来说，对于不涉及高精尖、复杂算法的项目，可以尽量选择简单的数据结构。以下是一些建议和实践：\n\n1. **根据场景选择数据结构**：静态数组适合元素不超过 100 的场合，动态数组适合元素不超过 1000 的场合，链表适合元素不超过 3000 的场合。在需要动态分配内存的场合，可以考虑使用静态内存，以提高程序稳定性。\n\n2. **实际项目中的应用**：数据结构和算法在实际项目中扮演着重要角色，可以通过实际项目场景来说明一种数据结构解决了什么实际问题，以及其各种操作时间复杂度、优缺点等。这有助于理解数据结构在编程中的重要性。\n\n3. **权衡选择**：在实际开发中，需要权衡选择使用哪种数据结构和算法。除了考虑算法的时间复杂度、空间复杂度，还需要考虑其在具体场景下的执行效率、易用性、维护成本等因素\n\n综上所述，实际项目中的数据结构和算法选择应该根据具体的应用场景和问题需求进行权衡和取舍，以达到最优的解决方案。\n\n## 算法（AI）\n\n算法是解决问题的一系列清晰指令，是计算机科学的基础。在实际开发中，选择合适的数据结构和算法对程序的性能和效率至关重要。在学习算法时，需要权衡选择使用哪种数据结构和算法，不能简单地用复杂度来表示执行性能。此外，编程算法面试经验总结中提到，算法面试常涉及的主题、考察形式和评价方式，对求职备考的朋友们有所帮助。另外，算法也在机器学习领域有着广泛的应用，比如预测住房价格、探索客户的人口统计学数据以确定模式等。在实际开发中，对于数组的算法，可以通过合并两个有序数组来进行实现。对于统计相同数字出现的次数，可以利用数组元素下标对应数字，用数组元素的值表示对应数字出现的次数，这是一种典型的空间换时间的算法。如果整数的范围是 1 到 n，可以考虑使用其他的算法来实现。\n\n### 关键要点\n\n1. **目的和问题解决：** 算法的设计旨在解决特定问题或执行特定任务。它们用于执行各种计算和操作，从简单的搜索和排序到复杂的图算法和机器学习。\n2. **输入和输出：** 算法接受一个或多个输入，通过执行一系列计算操作，产生一个输出。输入可以是数据、问题描述或其他形式的信息。\n3. **有限性：** 算法是有限步骤的集合，每一步都可以在有限的时间内完成。这确保了算法的执行是可以终止的。\n4. **确定性：** 算法的每一步都是确定性的，即对于给定的输入，它总是产生相同的输出。这使得算法在不同的环境中具有可重复性。\n5. **效率：** 算法的效率是一个关键方面，通常通过时间复杂度和空间复杂度来衡量。好的算法能够以较低的时间和空间开销解决问题。\n6. **可读性和可维护性：** 除了效率，算法的可读性和可维护性也是重要的。一个清晰、简单、易于理解的算法更容易被其他人理解和维护。\n\n### 算法的分类\n\n- **搜索算法：** 用于在数据集中查找特定元素的算法，如线性搜索和二分搜索。\n- **排序算法：** 对一组元素进行排列的算法，例如冒泡排序、快速排序、归并排序等。\n- **图算法：** 处理图数据结构的算法，包括深度优先搜索、广度优先搜索、最短路径算法等。\n- **动态规划：** 将复杂问题分解为简单子问题，并通过保存已解决的子问题的解来加速求解的算法。\n- **贪心算法：** 在每一步选择中都采取当前状态下最好或最优的选择，从而希望得到全局最好或最优解的算法。\n- **回溯算法：** 通过不断试错找到问题的解，是一种递归的算法。\n- **分治算法：** 将问题分解成相互独立且与原问题相同的子问题，然后递归地解决子问题。\n- **随机化算法：** 使用随机数来解决问题的算法，例如快速排序的随机化版本。\n- **机器学习算法：** 用于构建模型、分类和预测的一系列算法，如决策树、支持向量机、神经网络等。\n\n算法是计算机科学的核心，它们不仅仅是问题求解的工具，也是构建复杂系统和应对实际挑战的基础。深入理解和熟练运用各种算法，有助于提高问题解决和计算机科学建模的能力。\n\n## 体系结构\n\n## 操作系统\n\n[操作系统的具体学习目录]({{< relref \"\">}})\n\n## 计算机网络\n\n## CS 后续学习路径\n\n为自身打造的路径\n\\_\n目标：人工智能**Artificial intelligence**\n数学\n[Search --- Graph theory]({{< relref \"\" >}})\n\n[Knowledge --- Boolean logic]({{< relref \"\" >}})\n\n[Uncertainty --- Probability]({{< relref \"\" >}})\n\n目标：应用程序开发**Application Developer**\n\n[Full Stack]({{< relref \"\" >}})\n\n目标：计算机图形学**Computer graphics**\n\n目标：软件工程**Software engineering**\n\n## LeetCode\n\n每日任务\n[合并两个有序数组]({{< relref \"\" >}})\n\n[移除元素]({{< relref \"\" >}})\n\n[删除有序数组中的重复项]({{< relref \"\" >}})\n"
        }
    ]
}