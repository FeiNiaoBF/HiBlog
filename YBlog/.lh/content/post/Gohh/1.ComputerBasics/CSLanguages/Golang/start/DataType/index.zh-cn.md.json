{
    "sourceFile": "content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/start/DataType/index.zh-cn.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1715565776498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715565782785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,27 +12,28 @@\n ---\n \n \n ## Go 语言中的数据结构\n+\n ### 基础数据结构\n \n  1. **数组（Array）** - 由固定长度的相同类型元素组成的数据结构。\n  2. **切片（Slice）** - 由数组构成的动态长度序列，提供了更灵活的操作方式。\n  3. **映射（Map）** - 存储键值对的集合，用于快速检索数据。\n  4. **结构体（Struct）** - 可以包含不同类型字段的复合数据类型。\n \n-\n ### 其他数据结构和类型\n \n 1. **通道（Channel）** - 用于在 Go 协程之间进行通信的类型。\n 2. **接口（Interface）** - 定义对象的行为，是一种抽象类型。\n 3. **指针（Pointer）** - 存储变量的内存地址，用于直接访问内存中的值。\n \n #### 通道（Channel）\n+\n #### 接口（Interface）\n+\n #### 指针（Pointer）\n \n-\n ## 命名规范\n \n 注意：\n > **首字母大小写：** 以大写字母开头的标识符是 **public** 的（可导出的），可以被其他包访问。以小写字母开头的标识符是私有的，只能在当前包内访问。\n@@ -47,9 +48,8 @@\n 6. **结构体**：结构体的命名同样使用驼峰命名法，例如 `type MyStruct struct`。\n 7. **接口**：接口的命名同样使用驼峰命名法，例如 `type MyInterface interface`。\n 8. **枚举**：枚举的命名同样使用驼峰命名法，例如 `type Color int`。\n \n-\n 在 Go 语言中，命名变量时有一些常见的命名规范，这些规范有助于编写清晰、易读的代码。\n \n 1. 使用驼峰命名法：变量名应该使用驼峰命名法，即除第一个单词外，其余单词的首字母大写，例如 `myVariable`。\n 2. 使用有意义的名称：变量名应该具有描述性，能够清晰地表达变量的用途和含义。\n@@ -58,5 +58,4 @@\n 5. 使用全大写命名的常量：在 Go 语言中，全大写的变量名通常用于表示常量。\n 6. 遵循约定俗成的命名规范：Go 语言社区有一些常见的命名约定，比如用 `i` 表示循环变量，用 `err` 表示错误变量等，建议遵循这些约定以保持代码风格的一致性。\n \n 这些命名规范有助于编写清晰、易读的代码，并且有助于提高代码的可维护性。\n-\n"
                },
                {
                    "date": 1715565788494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n ---\n title: \"DataType\"\n date: 2024-05-13T09:10:19+08:00\n-draft: true\n+draft: false\n taps: []\n categories: []\n author: [\"Yeelight\"]\n showtoc: true\n"
                },
                {
                    "date": 1715565795300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n ---\n title: \"DataType\"\n date: 2024-05-13T09:10:19+08:00\n draft: false\n-taps: []\n-categories: []\n+taps: [\"Golang\", \"start\"]\n+categories: [\"Golang\", \"CS\", \"Languages\"]\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n math: false\n"
                }
            ],
            "date": 1715565776498,
            "name": "Commit-0",
            "content": "---\ntitle: \"DataType\"\ndate: 2024-05-13T09:10:19+08:00\ndraft: true\ntaps: []\ncategories: []\nauthor: [\"Yeelight\"]\nshowtoc: true\nweight:\nmath: false\nreadingTime: true\n---\n\n\n## Go 语言中的数据结构\n### 基础数据结构\n\n 1. **数组（Array）** - 由固定长度的相同类型元素组成的数据结构。\n 2. **切片（Slice）** - 由数组构成的动态长度序列，提供了更灵活的操作方式。\n 3. **映射（Map）** - 存储键值对的集合，用于快速检索数据。\n 4. **结构体（Struct）** - 可以包含不同类型字段的复合数据类型。\n\n\n### 其他数据结构和类型\n\n1. **通道（Channel）** - 用于在 Go 协程之间进行通信的类型。\n2. **接口（Interface）** - 定义对象的行为，是一种抽象类型。\n3. **指针（Pointer）** - 存储变量的内存地址，用于直接访问内存中的值。\n\n#### 通道（Channel）\n#### 接口（Interface）\n#### 指针（Pointer）\n\n\n## 命名规范\n\n注意：\n> **首字母大小写：** 以大写字母开头的标识符是 **public** 的（可导出的），可以被其他包访问。以小写字母开头的标识符是私有的，只能在当前包内访问。\n\n在 Go 语言中，有一些命名规范适用于不同的命名情况。以下是一些常见的命名规范：\n\n1. **包名**：包名应该使用单数形式，且应该是小写的，例如 `utils`。\n2. **文件名**：文件名应该全部使用小写字母，可以包含下划线 `_`，例如 `my_file.go`。\n3. **变量**：变量名使用驼峰命名法，例如 `myVariable`。私有变量的命名应该以小写字母开头，公共变量则以大写字母开头。\n4. **常量**：常量的命名应该全部使用大写字母，可以包含下划线 `_`，例如 `MAX_SIZE`。\n5. **函数**：函数名同样使用驼峰命名法，例如 `calculateTotal`。\n6. **结构体**：结构体的命名同样使用驼峰命名法，例如 `type MyStruct struct`。\n7. **接口**：接口的命名同样使用驼峰命名法，例如 `type MyInterface interface`。\n8. **枚举**：枚举的命名同样使用驼峰命名法，例如 `type Color int`。\n\n\n在 Go 语言中，命名变量时有一些常见的命名规范，这些规范有助于编写清晰、易读的代码。\n\n1. 使用驼峰命名法：变量名应该使用驼峰命名法，即除第一个单词外，其余单词的首字母大写，例如 `myVariable`。\n2. 使用有意义的名称：变量名应该具有描述性，能够清晰地表达变量的用途和含义。\n3. 避免使用单个字符作为变量名：除非是临时变量或者循环变量，否则应该避免使用单个字符作为变量名，以提高代码的可读性。\n4. 使用短小的名称：变量名应该尽量简洁，但又能清晰表达变量的含义。\n5. 使用全大写命名的常量：在 Go 语言中，全大写的变量名通常用于表示常量。\n6. 遵循约定俗成的命名规范：Go 语言社区有一些常见的命名约定，比如用 `i` 表示循环变量，用 `err` 表示错误变量等，建议遵循这些约定以保持代码风格的一致性。\n\n这些命名规范有助于编写清晰、易读的代码，并且有助于提高代码的可维护性。\n\n"
        }
    ]
}