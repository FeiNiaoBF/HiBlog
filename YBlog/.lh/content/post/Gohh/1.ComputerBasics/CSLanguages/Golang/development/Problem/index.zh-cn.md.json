{
    "sourceFile": "content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/development/Problem/index.zh-cn.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1715566004530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715566014372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,4 +9,35 @@\n weight:\n math: false\n readingTime: true\n ---\n+\n+## Introduction\n+\n+## 一般问题\n+\n+1. Go 语言的显式范围和垃圾回收和变量逃逸\n+\t1. 在一个包范围内声明的变量，如果在函数内部声明了同名变量，那么这两个变量是不同的实体，作用域不同，垃圾回收器会分别管理它们。\n+\t2. 发生逃逸的情况包括：变量生命周期不确定、变量占用内存较大、变量不确定类型、变量不确定大小。\n+2. 使用更好的注释\n+3. Go 的命名规则\n+4. 对于类型中的底层类型\n+5. 内置类型中 string 是否和 c 中的一样有 `\\0`\n+\t没有 C 语言定义字符用的结尾 `\\0`，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销\n+6. `type boolean = bool` 和 `type boolean bool` 区别\n+\t定义声明和别名声明\n+7. 常量和变量之间的转化\n+\t1. 常量可以赋值给变量，但变量不能赋值给常量，因为常量的值在编译时就必须是确定的。\n+\t2. 常量可以转换为不同类型的变量，只要这个转换是安全的，即不会丢失信息或导致溢出。\n+\t3. 变量之间也可以进行类型转换，但必须满足类型转换的规则\n+8. 定义时传递方法不同\n+\t数组是值类型，拥有固定的长度，重点是它是值传递的，所以说他是值类型。切片的话则是传递地址或者说指针，所以说它是引用类型，而且他的长度是可以变化的可以扩容的。\n+9.\n+\n+## 主要问题\n+\n+1. Go Modules 的使用有感\n+2. Go Package 的使用\n+3. [[Goroutine 并行的开始]]\n+4. [[Go 中的 Interfaces type]]\n+5.\n+\n"
                },
                {
                    "date": 1715566021421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,23 @@\n \n ## 一般问题\n \n 1. Go 语言的显式范围和垃圾回收和变量逃逸\n-\t1. 在一个包范围内声明的变量，如果在函数内部声明了同名变量，那么这两个变量是不同的实体，作用域不同，垃圾回收器会分别管理它们。\n-\t2. 发生逃逸的情况包括：变量生命周期不确定、变量占用内存较大、变量不确定类型、变量不确定大小。\n+1. 在一个包范围内声明的变量，如果在函数内部声明了同名变量，那么这两个变量是不同的实体，作用域不同，垃圾回收器会分别管理它们。\n+2. 发生逃逸的情况包括：变量生命周期不确定、变量占用内存较大、变量不确定类型、变量不确定大小。\n 2. 使用更好的注释\n 3. Go 的命名规则\n 4. 对于类型中的底层类型\n 5. 内置类型中 string 是否和 c 中的一样有 `\\0`\n-\t没有 C 语言定义字符用的结尾 `\\0`，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销\n+ 没有 C 语言定义字符用的结尾 `\\0`，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销\n 6. `type boolean = bool` 和 `type boolean bool` 区别\n-\t定义声明和别名声明\n+ 定义声明和别名声明\n 7. 常量和变量之间的转化\n-\t1. 常量可以赋值给变量，但变量不能赋值给常量，因为常量的值在编译时就必须是确定的。\n-\t2. 常量可以转换为不同类型的变量，只要这个转换是安全的，即不会丢失信息或导致溢出。\n-\t3. 变量之间也可以进行类型转换，但必须满足类型转换的规则\n+1. 常量可以赋值给变量，但变量不能赋值给常量，因为常量的值在编译时就必须是确定的。\n+2. 常量可以转换为不同类型的变量，只要这个转换是安全的，即不会丢失信息或导致溢出。\n+3. 变量之间也可以进行类型转换，但必须满足类型转换的规则\n 8. 定义时传递方法不同\n-\t数组是值类型，拥有固定的长度，重点是它是值传递的，所以说他是值类型。切片的话则是传递地址或者说指针，所以说它是引用类型，而且他的长度是可以变化的可以扩容的。\n+ 数组是值类型，拥有固定的长度，重点是它是值传递的，所以说他是值类型。切片的话则是传递地址或者说指针，所以说它是引用类型，而且他的长度是可以变化的可以扩容的。\n 9.\n \n ## 主要问题\n \n@@ -39,5 +39,4 @@\n 2. Go Package 的使用\n 3. [[Goroutine 并行的开始]]\n 4. [[Go 中的 Interfaces type]]\n 5.\n-\n"
                },
                {
                    "date": 1715566028094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,23 @@\n \n ## 一般问题\n \n 1. Go 语言的显式范围和垃圾回收和变量逃逸\n-1. 在一个包范围内声明的变量，如果在函数内部声明了同名变量，那么这两个变量是不同的实体，作用域不同，垃圾回收器会分别管理它们。\n-2. 发生逃逸的情况包括：变量生命周期不确定、变量占用内存较大、变量不确定类型、变量不确定大小。\n+\t1. 在一个包范围内声明的变量，如果在函数内部声明了同名变量，那么这两个变量是不同的实体，作用域不同，垃圾回收器会分别管理它们。\n+\t2. 发生逃逸的情况包括：变量生命周期不确定、变量占用内存较大、变量不确定类型、变量不确定大小。\n 2. 使用更好的注释\n 3. Go 的命名规则\n 4. 对于类型中的底层类型\n 5. 内置类型中 string 是否和 c 中的一样有 `\\0`\n- 没有 C 语言定义字符用的结尾 `\\0`，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销\n+\t没有 C 语言定义字符用的结尾 `\\0`，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销\n 6. `type boolean = bool` 和 `type boolean bool` 区别\n- 定义声明和别名声明\n+\t定义声明和别名声明\n 7. 常量和变量之间的转化\n-1. 常量可以赋值给变量，但变量不能赋值给常量，因为常量的值在编译时就必须是确定的。\n-2. 常量可以转换为不同类型的变量，只要这个转换是安全的，即不会丢失信息或导致溢出。\n-3. 变量之间也可以进行类型转换，但必须满足类型转换的规则\n+\t1. 常量可以赋值给变量，但变量不能赋值给常量，因为常量的值在编译时就必须是确定的。\n+\t2. 常量可以转换为不同类型的变量，只要这个转换是安全的，即不会丢失信息或导致溢出。\n+\t3. 变量之间也可以进行类型转换，但必须满足类型转换的规则\n 8. 定义时传递方法不同\n- 数组是值类型，拥有固定的长度，重点是它是值传递的，所以说他是值类型。切片的话则是传递地址或者说指针，所以说它是引用类型，而且他的长度是可以变化的可以扩容的。\n+\t数组是值类型，拥有固定的长度，重点是它是值传递的，所以说他是值类型。切片的话则是传递地址或者说指针，所以说它是引用类型，而且他的长度是可以变化的可以扩容的。\n 9.\n \n ## 主要问题\n \n"
                },
                {
                    "date": 1715566034735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n ---\n title: \"Problem\"\n date: 2024-05-13T09:13:33+08:00\n-draft: true\n+draft: false\n taps: []\n categories: []\n author: [\"Yeelight\"]\n showtoc: true\n"
                },
                {
                    "date": 1715566042114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n title: \"Problem\"\n date: 2024-05-13T09:13:33+08:00\n draft: false\n-taps: []\n+taps: [\"Golang\"]\n categories: []\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n"
                },
                {
                    "date": 1715566049798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n title: \"Problem\"\n date: 2024-05-13T09:13:33+08:00\n draft: false\n-taps: [\"Golang\", \"]\n+taps: [\"Golang\", \"\"]\n categories: [\"Golang\", \"development\"]\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n"
                }
            ],
            "date": 1715566004530,
            "name": "Commit-0",
            "content": "---\ntitle: \"Problem\"\ndate: 2024-05-13T09:13:33+08:00\ndraft: true\ntaps: []\ncategories: []\nauthor: [\"Yeelight\"]\nshowtoc: true\nweight:\nmath: false\nreadingTime: true\n---\n"
        }
    ]
}