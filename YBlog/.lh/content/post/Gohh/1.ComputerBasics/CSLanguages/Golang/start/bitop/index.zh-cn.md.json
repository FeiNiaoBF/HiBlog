{
    "sourceFile": "content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/start/bitop/index.zh-cn.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 45,
            "patches": [
                {
                    "date": 1716173682729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716173699183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,4 +9,62 @@\n weight:\n math: false\n readingTime: true\n ---\n+\n+## 运算操作符\n+\n+运算操作符包括算术运算符、位运算符、比较运算符、布尔运算符和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n+\n+满足二元条件\n+- 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n+- 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n+- 如果这两个操作数都是**类型不确定**的，则它们必须同时都为两个布尔值，同时都为两个字符串值，或者同时都为两个基本数字值。\n+二元条件：\n+```go\n+// 清零 go 特有的\n+z := 0b1101 &^ 0b0001\n+fmt.Printf(\"z: %b\", z) // 1100\n+```\n+\n+\n+满足一元条件\n+- 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n+- 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n+一元条件：\n+**`^` 位反（或位补)**\n+\n+- 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n+- 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。\n+- 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。\n+\n+## 数值运算符\n+\n+#### 除法和余数运算\n+\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。我们将在以后的文章中了解到 Go 中的恐慌和恐慌恢复机制。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+\n+#### 自增和自减操作符\n+\n+和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n+\n+\n+## 字符串衔接运算符\n+\n+```go\n+var a = \"Go\"\n+a += \"lang\"\n+```\n+\n+如果一个字符串衔接运算中的一个操作值为类型确定的，则结果字符串是一个类型和此操作数类型相同的类型确定值。否则，结果字符串是一个类型不确定值（肯定是一个常量）。\n+\n+### 操作符运算的优先级\n+\n+```go\n+*   /   %   <<  >>  &   &^  // 1\n++   -   |   ^               // 2\n+==  !=  <   <=  >   >=      // 3\n+&&                          // 4\n+||                          // 5\n+```\n+移位运算`<<`和`>>`的优先级比加减法`+`和`-`的优先级要高。\n+\n"
                },
                {
                    "date": 1716173711509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,20 +15,22 @@\n \n 运算操作符包括算术运算符、位运算符、比较运算符、布尔运算符和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n \n 满足二元条件\n+\n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n - 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n - 如果这两个操作数都是**类型不确定**的，则它们必须同时都为两个布尔值，同时都为两个字符串值，或者同时都为两个基本数字值。\n 二元条件：\n+\n ```go\n // 清零 go 特有的\n z := 0b1101 &^ 0b0001\n fmt.Printf(\"z: %b\", z) // 1100\n ```\n \n+满足一元条件\n \n-满足一元条件\n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n 一元条件：\n **`^` 位反（或位补)**\n@@ -46,9 +48,8 @@\n #### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n-\n ## 字符串衔接运算符\n \n ```go\n var a = \"Go\"\n@@ -65,6 +66,6 @@\n ==  !=  <   <=  >   >=      // 3\n &&                          // 4\n ||                          // 5\n ```\n+\n 移位运算`<<`和`>>`的优先级比加减法`+`和`-`的优先级要高。\n-\n"
                },
                {
                    "date": 1716173722458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。\n \n ## 数值运算符\n \n-#### 除法和余数运算\n+### 除法和余数运算\n \n 如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。我们将在以后的文章中了解到 Go 中的恐慌和恐慌恢复机制。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n #### 自增和自减操作符\n"
                },
                {
                    "date": 1716173730459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n 一元条件：\n-**`^` 位反（或位补)**\n+**`^` 位反（或位补) **\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n - 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。\n@@ -44,9 +44,9 @@\n ### 除法和余数运算\n \n 如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。我们将在以后的文章中了解到 Go 中的恐慌和恐慌恢复机制。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n-#### 自增和自减操作符\n+### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n ## 字符串衔接运算符\n"
                },
                {
                    "date": 1716173750980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n ---\n \n ## 运算操作符\n \n-运算操作符包括算术运算符、位运算符、比较运算符、布尔运算符和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n+运算操作符包括`算术运算符`、位运算符、比较运算符、布尔运算符和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n \n 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n@@ -32,9 +32,9 @@\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n 一元条件：\n-**`^` 位反（或位补) **\n+**`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n - 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。\n"
                },
                {
                    "date": 1716173756836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n ---\n \n ## 运算操作符\n \n-运算操作符包括`算术运算符`、位运算符、比较运算符、布尔运算符和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n+运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n \n 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n"
                },
                {
                    "date": 1716173763719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n ---\n \n ## 运算操作符\n \n-运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和字符串衔接运算符这些二元（需要两个操作数）或一元（需要一个操作数）\n+运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）\n \n 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n"
                },
                {
                    "date": 1716173770434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n ---\n \n ## 运算操作符\n \n-运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）\n+运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）操作符\n \n 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n"
                },
                {
                    "date": 1716173781340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n ---\n \n ## 运算操作符\n \n-运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）操作符\n+运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）操作符。\n \n-满足二元条件\n+## 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n - 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n - 如果这两个操作数都是**类型不确定**的，则它们必须同时都为两个布尔值，同时都为两个字符串值，或者同时都为两个基本数字值。\n"
                },
                {
                    "date": 1716173790813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n z := 0b1101 &^ 0b0001\n fmt.Printf(\"z: %b\", z) // 1100\n ```\n \n-满足一元条件\n+## 满足一元条件\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n 一元条件：\n"
                },
                {
                    "date": 1716173800916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n - 如果这两个操作数都是**类型不确定**的，则它们必须同时都为两个布尔值，同时都为两个字符串值，或者同时都为两个基本数字值。\n 二元条件：\n \n ```go\n-// 清零 go 特有的\n z := 0b1101 &^ 0b0001\n fmt.Printf(\"z: %b\", z) // 1100\n ```\n \n"
                },
                {
                    "date": 1716174790462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,18 @@\n readingTime: true\n ---\n \n ## 运算操作符\n+算术运算符：如加减乘除等。\n \n-运算操作符包括`算术运算符`、`位运算符`、`比较运算符`、`布尔运算符`和`字符串衔接运算符`这些二元（需要两个操作数）或一元（需要一个操作数）操作符。\n+位运算符：如按位与、或、异或等。\n \n+比较运算符：如等于、不等于、大于、小于等。\n+\n+布尔运算符：如逻辑与、或、非。\n+\n+字符串衔接运算符：用于连接字符串。\n+\n ## 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n - 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n"
                },
                {
                    "date": 1716174796720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n readingTime: true\n ---\n \n ## 运算操作符\n-算术运算符：如加减乘除等。\n \n+- 算术运算符：如加减乘除等。\n 位运算符：如按位与、或、异或等。\n \n 比较运算符：如等于、不等于、大于、小于等。\n \n"
                },
                {
                    "date": 1716174802185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,11 @@\n \n ## 运算操作符\n \n - 算术运算符：如加减乘除等。\n-位运算符：如按位与、或、异或等。\n+- 位运算符：如按位与、或、异或等。\n+- 比较运算符：如等于、不等于、大于、小于等。\n \n-比较运算符：如等于、不等于、大于、小于等。\n-\n 布尔运算符：如逻辑与、或、非。\n \n 字符串衔接运算符：用于连接字符串。\n \n"
                },
                {
                    "date": 1716174807383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,11 @@\n \n - 算术运算符：如加减乘除等。\n - 位运算符：如按位与、或、异或等。\n - 比较运算符：如等于、不等于、大于、小于等。\n+- 布尔运算符：如逻辑与、或、非。\n+- 字符串衔接运算符：用于连接字符串。\n \n-布尔运算符：如逻辑与、或、非。\n-\n-字符串衔接运算符：用于连接字符串。\n-\n ## 满足二元条件\n \n - 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n - 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n"
                },
                {
                    "date": 1716174827433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,13 @@\n - 字符串衔接运算符：用于连接字符串。\n \n ## 满足二元条件\n \n-- 如果这两个操作数都是**类型确定值**，则它们的类型必须相同，或者其中一个操作数可以被隐式转换到另一个操作数的类型。\n-- 如果其中有一个操作数是**类型确定**的，另外一个为**类型不确定**操作数可以表示为此类型确定操作数的类型的值，要么此类型不确定操作数的默认类型的任何值可以被隐式转换到此类型确定操作数的类型。\n-- 如果这两个操作数都是**类型不确定**的，则它们必须同时都为两个布尔值，同时都为两个字符串值，或者同时都为两个基本数字值。\n-二元条件：\n+二元运算符条件\n+操作数必须类型相同或可隐式转换。\n \n+类型不确定的操作数需能表示为类型确定操作数的类型。\n+\n ```go\n z := 0b1101 &^ 0b0001\n fmt.Printf(\"z: %b\", z) // 1100\n ```\n"
                },
                {
                    "date": 1716174833270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,9 @@\n - 字符串衔接运算符：用于连接字符串。\n \n ## 满足二元条件\n \n-二元运算符条件\n-操作数必须类型相同或可隐式转换。\n-\n+- 操作数必须类型相同或可隐式转换。\n 类型不确定的操作数需能表示为类型确定操作数的类型。\n \n ```go\n z := 0b1101 &^ 0b0001\n"
                },
                {
                    "date": 1716174840441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n ## 满足二元条件\n \n - 操作数必须类型相同或可隐式转换。\n-类型不确定的操作数需能表示为类型确定操作数的类型。\n+- 类型不确定的操作数需能表示为类型确定操作数的类型。\n \n ```go\n z := 0b1101 &^ 0b0001\n fmt.Printf(\"z: %b\", z) // 1100\n@@ -32,8 +32,10 @@\n ## 满足一元条件\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n+\n+\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174886247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n \n \n+-\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174894514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,9 @@\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n \n-\n--\n+- 操作数\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174902315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n \n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n \n-- 操作数\n+- 操作数类型确定\n+-\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174917429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n - 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n - 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n \n - 操作数类型确定\n--\n+- 操作数类型确定\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174926566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,10 @@\n ```\n \n ## 满足一元条件\n \n-- 如果这个操作数是类型确定的，则它的类型必须为所要求的特定类型，或者此操作数可以被隐式转换为所要求的特定类型。\n-- 如果一个操作数是类型不确定的，则要么此操作数可以表示为所要求的特定类型值，要么此操作数的默认类型的任何值可以被隐式转换为所要求的特定类型。\n-\n - 操作数类型确定\n-- 操作数类型确定\n+- 操作数类型可以被隐式转换\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n"
                },
                {
                    "date": 1716174993146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,15 @@\n ## 满足一元条件\n \n - 操作数类型确定\n - 操作数类型可以被隐式转换\n+\n 一元条件：\n **`^` 位反（或位补)**\n \n - 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n - 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。\n-- 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。\n+- 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n ### 除法和余数运算\n"
                },
                {
                    "date": 1716175006553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n \n 一元条件：\n **`^` 位反（或位补)**\n \n-- 一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。\n-- 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。\n+- 一个类型为数字型常量所表示的值是不能溢出它的类型的表示范围的。\n+- 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n"
                },
                {
                    "date": 1716175017255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n 一元条件：\n **`^` 位反（或位补)**\n \n-- 一个类型为数字型常量所表示的值是不能溢出它的类型的表示范围的。\n+- 类型为数字型常量所表示的值是*不能溢出它的类型的表示范围的。\n - 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n"
                },
                {
                    "date": 1716175022836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n \n 一元条件：\n **`^` 位反（或位补)**\n \n-- 类型为数字型常量所表示的值是*不能溢出它的类型的表示范围的。\n-- 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n+- 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n+- 类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n"
                },
                {
                    "date": 1716175028213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n 一元条件：\n **`^` 位反（或位补)**\n \n - 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n-- 类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n+- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n"
                },
                {
                    "date": 1716175040275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n 一元条件：\n **`^` 位反（或位补)**\n \n - 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n-- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断。\n+- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值不会被截断。\n - 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n"
                },
                {
                    "date": 1716175054877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n **`^` 位反（或位补)**\n \n - 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n - 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值不会被截断。\n-- 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n+- 将一个非常量数字xie转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n ### 除法和余数运算\n"
                },
                {
                    "date": 1716175077570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n **`^` 位反（或位补)**\n \n - 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n - 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值不会被截断。\n-- 将一个非常量数字xie转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n+- 将一个非常量数字型转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型*。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n ### 除法和余数运算\n"
                },
                {
                    "date": 1716175086212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n 一元条件：\n **`^` 位反（或位补)**\n \n - 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n-- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值不会被截断。\n-- 将一个非常量数字型转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型*。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n+- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值*不会被截断*。\n+- 将一个非常量数字型转换为其它数字类型时，此非常量数字值*可以溢出转化结果的类型*。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n ### 除法和余数运算\n"
                },
                {
                    "date": 1716175091877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n 一元条件：\n **`^` 位反（或位补)**\n \n-- 类型为数字型常量所表示的值是*不能溢出*它的类型的表示范围的。\n+- 类型为数字型常量所表示的值是**不能溢出*它的类型的表示范围的。\n - 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值*不会被截断*。\n - 将一个非常量数字型转换为其它数字类型时，此非常量数字值*可以溢出转化结果的类型*。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n"
                },
                {
                    "date": 1716175097025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n \n 一元条件：\n **`^` 位反（或位补)**\n \n-- 类型为数字型常量所表示的值是**不能溢出*它的类型的表示范围的。\n-- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值*不会被截断*。\n-- 将一个非常量数字型转换为其它数字类型时，此非常量数字值*可以溢出转化结果的类型*。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n+- 类型为数字型常量所表示的值是**不能溢出**它的类型的表示范围的。\n+- 类型为不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。此数值**不会被截断**。\n+- 将一个非常量数字型转换为其它数字类型时，此非常量数字值**可以溢出转化结果的类型**。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断表示。\n \n ## 数值运算符\n \n ### 除法和余数运算\n"
                },
                {
                    "date": 1716175114204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n ## 数值运算符\n \n ### 除法和余数运算\n \n-如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。我们将在以后的文章中了解到 Go 中的恐慌和恐慌恢复机制。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n"
                },
                {
                    "date": 1716175123040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n ## 数值运算符\n \n ### 除法和余数运算\n \n-如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（panic）。恐慌类似与某些其它语言中的异常（exception）。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（）。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n"
                },
                {
                    "date": 1716175129766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n ## 数值运算符\n \n ### 除法和余数运算\n \n-如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**恐慌**（）。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n"
                },
                {
                    "date": 1716175142817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n ## 数值运算符\n \n ### 除法和余数运算\n \n-如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。如果除数 `y` 非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。如果除数 `y` 为非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n"
                },
                {
                    "date": 1716175155233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,10 @@\n ## 数值运算符\n \n ### 除法和余数运算\n \n-如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。如果除数 `y` 为非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n+如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。\n+如果除数 `y` 为一个非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n 和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n"
                },
                {
                    "date": 1716175168122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,13 +45,14 @@\n \n ### 除法和余数运算\n \n 如果除数 `y` 是一个常量，则它必须不为0，否则编译不通过。如果它是一个整数型非常量，则在运行时刻将抛出一个**panic**。\n+\n 如果除数 `y` 为一个非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n-和很多其它流行语言一样，Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n+Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n ## 字符串衔接运算符\n \n ```go\n"
                },
                {
                    "date": 1716175176744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n 如果除数 `y` 为一个非整数型的非常量，则运算结果为一个无穷大（Inf，当被除数不为0时）或者 `NaN`（not a number，当被除数为0时）\n \n ### 自增和自减操作符\n \n-Go 也支持自增（`++`）和自减（`--`）操作符。不过和其它语言不一样的是，自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n+Go 支持自增（`++`）和自减（`--`）操作符。\n+自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n ## 字符串衔接运算符\n \n ```go\n"
                },
                {
                    "date": 1716175185431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n ### 自增和自减操作符\n \n Go 支持自增（`++`）和自减（`--`）操作符。\n-自增（`aNumber++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n+但是，自增（`a++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n ## 字符串衔接运算符\n \n ```go\n"
                },
                {
                    "date": 1716175193602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n ### 自增和自减操作符\n \n Go 支持自增（`++`）和自减（`--`）操作符。\n-但是，自增（`a++`）和自减（`aNumber--`）操作没有返回值，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n+但是，自增（`a++`）和自减（`a--`）操作**没有返回值**，所以它们不能当做 _表达式_ 来使用。另一个显著区别是，在 Go 中，自增（`++`）和自减（`--`）操作符只能后置，不能前\n \n ## 字符串衔接运算符\n \n ```go\n"
                },
                {
                    "date": 1716175372133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n ---\n title: \"运算操作符\"\n date: 2024-05-20T10:54:30+08:00\n-draft: true\n+draft: false\n taps: []\n categories: []\n author: [\"Yeelight\"]\n showtoc: true\n"
                },
                {
                    "date": 1716175381911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n ---\n title: \"运算操作符\"\n date: 2024-05-20T10:54:30+08:00\n draft: false\n-taps: []\n-categories: []\n+taps: ['Golang', 'start']\n+categories: ['Golang', 'CS']\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n math: false\n"
                }
            ],
            "date": 1716173682729,
            "name": "Commit-0",
            "content": "---\ntitle: \"运算操作符\"\ndate: 2024-05-20T10:54:30+08:00\ndraft: true\ntaps: []\ncategories: []\nauthor: [\"Yeelight\"]\nshowtoc: true\nweight:\nmath: false\nreadingTime: true\n---\n"
        }
    ]
}