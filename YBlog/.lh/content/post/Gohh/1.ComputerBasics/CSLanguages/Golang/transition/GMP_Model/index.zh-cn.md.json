{
    "sourceFile": "content/post/Gohh/1.ComputerBasics/CSLanguages/Golang/transition/GMP_Model/index.zh-cn.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1715565877095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715565884282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n \n 这段 Go 代码定义了一个函数 `stealWork`，用于尝试从其他的处理器（P）中窃取一个可运行的 goroutine 或定时器。这个函数是 Go 的调度器的一部分，用于在多个处理器之间平衡工作负载。以下是代码的详细解析：\n \n ### 函数签名\n+\n `func stealWork(now int64) (gp *g, inheritTime bool, rnow, pollUntil int64, newWork bool)`\n \n - **参数**:\n   - `now`: 当前的时间，用于处理定时器。如果为 0，则函数会自行获取当前时间。\n@@ -38,61 +39,76 @@\n \n ### 函数体解析\n \n 1. **获取当前 P 的指针**:\n+\n    ```go\n    pp := getg().m.p.ptr()\n    ```\n+\n    这行代码获取当前 Goroutine 的 M（操作系统线程）关联的 P（处理器）的指针。\n \n 2. **初始化变量**:\n+\n    ```go\n    ranTimer := false\n    ```\n+\n    初始化一个标志，用于记录是否运行了定时器。\n \n 3. **尝试窃取工作的循环**:\n+\n    ```go\n    const stealTries = 4\n    for i := 0; i < stealTries; i++ {\n        ...\n    }\n    ```\n+\n    函数尝试四次（由 `stealTries` 常量定义）来窃取工作。\n \n 4. **遍历所有 P 以窃取工作**:\n+\n    ```go\n    for enum := stealOrder.start(cheaprand()); !enum.done(); enum.next() {\n        ...\n    }\n    ```\n+\n    使用一个随机的开始点，遍历所有的 P。`stealOrder` 是一个遍历序列，可能基于当前状态进行优化选择。\n \n 5. **检查垃圾回收状态**:\n+\n    ```go\n    if sched.gcwaiting.Load() {\n        return nil, false, now, pollUntil, true\n    }\n    ```\n+\n    如果正在等待垃圾回收，直接返回，表示可能有 GC 相关的工作要做。\n \n 6. **检查和窃取定时器**:\n+\n    ```go\n    if stealTimersOrRunNextG && timerpMask.read(enum.position()) {\n        ...\n    }\n    ```\n+\n    在最后一次尝试中，尝试从其他 P 中窃取定时器。如果运行了定时器，可能会使一些 goroutine 变为可运行状态，这时会尝试从本地运行队列中获取一个 goroutine。\n \n 7. **尝试窃取运行队列中的 goroutine**:\n+\n    ```go\n    if gp := runqsteal(pp, p2, stealTimersOrRunNextG); gp != nil {\n        return gp, false, now, pollUntil, ranTimer\n    }\n    ```\n+\n    如果未运行定时器或定时器未使 goroutine 就绪，尝试从其他 P 的运行队列中窃取 goroutine。\n \n 8. **返回结果**:\n    如果所有尝试都失败了，返回 nil 和相关的时间信息。\n \n ### 总结\n+\n 这个函数是 Go 语言运行时的一部分，专门用于在多核处理器环境下优化 goroutine 的调度，通过窃取其他处理器上的工作来避免某些处理器闲置而其他处理器过载。这有助于提高整体的运行效率和响应性。\n"
                },
                {
                    "date": 1715565899061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,7 +108,5 @@\n \n 8. **返回结果**:\n    如果所有尝试都失败了，返回 nil 和相关的时间信息。\n \n-### 总结\n \n-这个函数是 Go 语言运行时的一部分，专门用于在多核处理器环境下优化 goroutine 的调度，通过窃取其他处理器上的工作来避免某些处理器闲置而其他处理器过载。这有助于提高整体的运行效率和响应性。\n"
                },
                {
                    "date": 1715565904578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n title: \"GMP_Model\"\n date: 2024-05-13T09:14:13+08:00\n draft: true\n-taps: []\n+taps: [\"Golang\"]\n categories: []\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n@@ -107,6 +107,4 @@\n    如果未运行定时器或定时器未使 goroutine 就绪，尝试从其他 P 的运行队列中窃取 goroutine。\n \n 8. **返回结果**:\n    如果所有尝试都失败了，返回 nil 和相关的时间信息。\n-\n-\n"
                },
                {
                    "date": 1715565910889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n ---\n title: \"GMP_Model\"\n date: 2024-05-13T09:14:13+08:00\n draft: true\n-taps: [\"Golang\"]\n-categories: []\n+taps: [\"Golang\", \"GMP\"]\n+categories: [\"Golang\", \"CS\", \"Languages\"]\n author: [\"Yeelight\"]\n showtoc: true\n weight:\n math: false\n"
                }
            ],
            "date": 1715565877095,
            "name": "Commit-0",
            "content": "---\ntitle: \"GMP_Model\"\ndate: 2024-05-13T09:14:13+08:00\ndraft: true\ntaps: []\ncategories: []\nauthor: [\"Yeelight\"]\nshowtoc: true\nweight:\nmath: false\nreadingTime: true\n---\n\n## Goroutine 协程\n\n## Processor 逻辑处理器\n\n## Thread 线程\n\n## 设计策略\n\n## 生命周期\n\n这段 Go 代码定义了一个函数 `stealWork`，用于尝试从其他的处理器（P）中窃取一个可运行的 goroutine 或定时器。这个函数是 Go 的调度器的一部分，用于在多个处理器之间平衡工作负载。以下是代码的详细解析：\n\n### 函数签名\n`func stealWork(now int64) (gp *g, inheritTime bool, rnow, pollUntil int64, newWork bool)`\n\n- **参数**:\n  - `now`: 当前的时间，用于处理定时器。如果为 0，则函数会自行获取当前时间。\n\n- **返回值**:\n  - `gp`: 返回被窃取的 goroutine 的指针。\n  - `inheritTime`: 布尔值，表示返回的 goroutine 是否应继承调度时间。\n  - `rnow`: 返回的当前时间或传入的时间。\n  - `pollUntil`: 表示下一个定时器事件的时间。\n  - `newWork`: 布尔值，表示是否有新的工作被准备好。\n\n### 函数体解析\n\n1. **获取当前 P 的指针**:\n   ```go\n   pp := getg().m.p.ptr()\n   ```\n   这行代码获取当前 Goroutine 的 M（操作系统线程）关联的 P（处理器）的指针。\n\n2. **初始化变量**:\n   ```go\n   ranTimer := false\n   ```\n   初始化一个标志，用于记录是否运行了定时器。\n\n3. **尝试窃取工作的循环**:\n   ```go\n   const stealTries = 4\n   for i := 0; i < stealTries; i++ {\n       ...\n   }\n   ```\n   函数尝试四次（由 `stealTries` 常量定义）来窃取工作。\n\n4. **遍历所有 P 以窃取工作**:\n   ```go\n   for enum := stealOrder.start(cheaprand()); !enum.done(); enum.next() {\n       ...\n   }\n   ```\n   使用一个随机的开始点，遍历所有的 P。`stealOrder` 是一个遍历序列，可能基于当前状态进行优化选择。\n\n5. **检查垃圾回收状态**:\n   ```go\n   if sched.gcwaiting.Load() {\n       return nil, false, now, pollUntil, true\n   }\n   ```\n   如果正在等待垃圾回收，直接返回，表示可能有 GC 相关的工作要做。\n\n6. **检查和窃取定时器**:\n   ```go\n   if stealTimersOrRunNextG && timerpMask.read(enum.position()) {\n       ...\n   }\n   ```\n   在最后一次尝试中，尝试从其他 P 中窃取定时器。如果运行了定时器，可能会使一些 goroutine 变为可运行状态，这时会尝试从本地运行队列中获取一个 goroutine。\n\n7. **尝试窃取运行队列中的 goroutine**:\n   ```go\n   if gp := runqsteal(pp, p2, stealTimersOrRunNextG); gp != nil {\n       return gp, false, now, pollUntil, ranTimer\n   }\n   ```\n   如果未运行定时器或定时器未使 goroutine 就绪，尝试从其他 P 的运行队列中窃取 goroutine。\n\n8. **返回结果**:\n   如果所有尝试都失败了，返回 nil 和相关的时间信息。\n\n### 总结\n这个函数是 Go 语言运行时的一部分，专门用于在多核处理器环境下优化 goroutine 的调度，通过窃取其他处理器上的工作来避免某些处理器闲置而其他处理器过载。这有助于提高整体的运行效率和响应性。\n"
        }
    ]
}